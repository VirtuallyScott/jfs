[{"type": "system", "data": {"content": "You will get information about a codebase that is currently on disk in the current folder.\nFrom this you will answer with code blocks that includes all the necessary unix terminal commands to a) install dependencies b) run all necessary parts of the codebase (in parallel if necessary).\nDo not install globally. Do not use sudo.\nDo not explain the code, just give the commands.\nDo not use placeholders, use example values (like . for a folder argument) if necessary.\n", "additional_kwargs": {}, "type": "system", "is_chunk": false}}, {"type": "human", "data": {"content": "Information about the codebase:\n\nLet's start with the project structure:\n\n```\njfs/\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 config.yaml.example\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 config.py\n\u2502   \u251c\u2500\u2500 jira_api.py\n\u2502   \u251c\u2500\u2500 menu.py\n\u2502   \u2514\u2500\u2500 utils.py\n\u2514\u2500\u2500 tests/\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 test_jira_api.py\n```\n\nNow, let's create the files one by one:\n\n.gitignore\n```\n# Ignore Python virtual environments\nvenv/\n\n# Ignore the actual config file to prevent sensitive data from being committed\nconfig.yaml\n```\n\nREADME.md\n```\n# JFS - Jira Fucking Sucks\n\nThis is an interactive, menu-driven Python script that leverages the JIRA REST API.\n\n## Setup\n\n1. Clone this repository.\n2. Create a virtual environment: `python3 -m venv venv`\n3. Activate the virtual environment: `source venv/bin/activate`\n4. Install the requirements: `pip install -r requirements.txt`\n5. Copy `config.yaml.example` to `config.yaml` and fill in your JIRA API details.\n\n## Usage\n\nRun the script with `python -m src.menu`\n\n## Adding New Menu Options\n\nTo add a new menu option:\n\n1. Add a new function in `jira_api.py` that performs the desired action.\n2. Add a new option in `menu.py` that calls this function.\n\n## Running Tests\n\nRun tests with `pytest tests/`\n```\n\nconfig.yaml.example\n```\napi_url: https://your-jira-instance.atlassian.net/rest/api/3\ntoken: your-api-token\ndefault_board: your-default-board-id\ndefault_team: your-default-team-id\n```\n\nrequirements.txt\n```\nrequests\npyyaml\npandas\n```\n\nsrc/__init__.py\n```\n# This file is required for Python to recognize the src directory as a package.\n```\n\nsrc/config.py\n```python\nimport yaml\n\ndef load_config():\n    with open('config.yaml', 'r') as f:\n        return yaml.safe_load(f)\n```\n\nsrc/jira_api.py\n```python\nimport requests\nfrom .config import load_config\n\nconfig = load_config()\n\ndef create_issue(issue_type, summary, description, assignee=None):\n    # Implement the function to create a new JIRA issue\n    pass\n\ndef move_issue(issue_key, transition_id):\n    # Implement the function to move an issue through the workflow\n    pass\n\ndef export_issues(jql, filename):\n    # Implement the function to export issues to a CSV file\n    pass\n\ndef import_issues(filename):\n    # Implement the function to import issues from a CSV file\n    pass\n```\n\nsrc/menu.py\n```python\nfrom .jira_api import create_issue, move_issue, export_issues, import_issues\n\ndef main():\n    while True:\n        print(\"1. Create new JIRA Issue as Epic\")\n        print(\"2. Create new JIRA Issue as Story\")\n        print(\"3. Move an Issue through workflow\")\n        print(\"4. Export All Open Issues to CSV\")\n        print(\"5. Export All Open Issues Assigned To Me To CSV\")\n        print(\"6. Import CSV\")\n        print(\"7. Exit\")\n        \n        option = input(\"Select an option: \")\n        \n        if option == '1':\n            # Call the function to create a new Epic\n            pass\n        elif option == '2':\n            # Call the function to create a new Story\n            pass\n        elif option == '3':\n            # Call the function to move an issue through the workflow\n            pass\n        elif option == '4':\n            # Call the function to export all open issues to a CSV file\n            pass\n        elif option == '5':\n            # Call the function to export all open issues assigned to me to a CSV file\n            pass\n        elif option == '6':\n            # Call the function to import issues from a CSV file\n            pass\n        elif option == '7':\n            break\n        else:\n            print(\"Invalid option. Please try again.\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\ntests/__init__.py\n```python\n# This file is required for Python to recognize the tests directory as a package.\n```\n\ntests/test_jira_api.py\n```python\nfrom src.jira_api import create_issue, move_issue, export_issues, import_issues\n\ndef test_create_issue():\n    # Implement the test for the create_issue function\n    pass\n\ndef test_move_issue():\n    # Implement the test for the move_issue function\n    pass\n\ndef test_export_issues():\n    # Implement the test for the export_issues function\n    pass\n\ndef test_import_issues():\n    # Implement the test for the import_issues function\n    pass\n```\n\nThis concludes a fully working implementation.", "additional_kwargs": {}, "type": "human", "example": false, "is_chunk": false}}, {"type": "ai", "data": {"content": "```bash\npython3 -m venv venv\nsource venv/bin/activate\npip install -r requirements.txt\ncp config.yaml.example config.yaml\n```\n\n```bash\npython -m src.menu\n```\n\n```bash\npytest tests/\n```", "additional_kwargs": {}, "type": "ai", "example": false, "is_chunk": true}}]